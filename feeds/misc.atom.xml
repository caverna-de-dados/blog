<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Caverna de Dados - misc</title><link href="https://cavernadedados.com/" rel="alternate"></link><link href="https://cavernadedados.com/feeds/misc.atom.xml" rel="self"></link><id>https://cavernadedados.com/</id><updated>2019-07-29T11:43:00+02:00</updated><subtitle>Um Blog sobre Data Science, Estatística, Economia e Programação.</subtitle><entry><title>Breve tutorial de Keras</title><link href="https://cavernadedados.com/2019/07/breve-tutorial-de-keras.html" rel="alternate"></link><published>2019-07-29T11:43:00+02:00</published><updated>2019-07-29T11:43:00+02:00</updated><author><name>diego</name></author><id>tag:cavernadedados.com,2019-07-29:/2019/07/breve-tutorial-de-keras.html</id><summary type="html">&lt;p&gt;Um tutoril de keras&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Introdução&lt;/h1&gt;
&lt;p&gt;Neste post, vou falar um pouco com implementar/prototipar sua rede neural com o framework Keras, e não falar da parte teórica, isso pode ser assunto para um próximo post. Antes de começar, uma breve introdução.&lt;/p&gt;
&lt;p&gt;Keras é um framework que permite a implementação de uma rede neural, de maneira rápida. Para exemplificar existem algumas maneiras de implementar uma, como por exemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementar voce mesmo a matemática (grafos computacionais, otimizações, etc)&lt;/li&gt;
&lt;li&gt;Utilizar alguma biblioteca, com por exemplo, tensorflow&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A primeira opção é boa para quem esta aprendendo, mas para quem pretende colocar o projeto em produção, não seria uma boa escolha por alguns motivos, por exemplo já existem projetos prontos como tensorflow e keras =). A segunda é uma escolha viável, porém, em algmas situações, queremos fazer alguns testes, rápidos, que não demandem um controle tão "profundo" do que ocorre debaixo do panos.&lt;/p&gt;
&lt;p&gt;Ai entra o Keras, ele é um framework que permite uma prototipação de maneira simples, em uma tradução livre da documentação:"feita para seres humanos, e não maquinas".&lt;/p&gt;
&lt;h1&gt;Instalando e importando&lt;/h1&gt;
&lt;p&gt;Keras roda em cima de backends, hoje existem implementações para Tensorflow, CNTK ou Theano, neste post, vou usar o Tensorflow.&lt;/p&gt;
&lt;p&gt;A maneira mais fácil instalar via pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;tensorflow&lt;/span&gt; &lt;span class="n"&gt;keras&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Para importar e ver se funcionou, veja o código abaixo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;keras&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ele exibe uma mensagem falando que estamos utilizando o backend Tensorflow.&lt;/p&gt;
&lt;p&gt;Obs: Se quiser saber mais sobre Tensorflow, mande um email, posso escrever um outro post, ou veja a própria documentação, é um ótimo ponto de partida.&lt;/p&gt;
&lt;h1&gt;Dados&lt;/h1&gt;
&lt;p&gt;Para fins didádicos, vou usar o famoso dataset MNIST, análogo ao Hello World para quem aprende alguma linguagem de programação nova.&lt;/p&gt;
&lt;p&gt;Para quem não conhece, o dataset é formado para imagems de 28x28 pixels, contendo digitos escritos a mão por pessoas e seus respectivos labels, digitos de 0 ao 9.&lt;/p&gt;
&lt;p&gt;Então vamos carregar o dataset&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;keras.datasets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mnist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ao executar o código acima, ele irá fazer o download dos dados,
e devolve os dados como duas tuples do python, a primeira contém
os dados para treinamento, e a segunda os dados para teste.&lt;/p&gt;
&lt;h2&gt;Sucinta exploração dos dados&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;((60000, 28, 28), (60000,), (10000, 28, 28), (10000,))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dos resultados acimas, vamos que existem 60000 imagens para treino e 10000 para teste.&lt;/p&gt;
&lt;p&gt;Podemos visualizar algumas imagens para entender melhor, da seguinte maneira:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;imagem_pixels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x_train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;imagem_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imagem_label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imagem_pixels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="/assets/output_14_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Dai vemos algumas imagens e suas classificações.&lt;/p&gt;
&lt;h2&gt;Implementação&lt;/h2&gt;
&lt;p&gt;Até aqui nada de Keras, somente carregamento e alguma visualização dos dados (onde normalmente se gasta mais tempo em qualquer projeto que envolva machine learning), mas agora que temos os dados prontos podemos pensar em uma rede neural básica para implementar.&lt;/p&gt;
&lt;p&gt;Vou utilizar uma versão simplificada da exibida nos videos de 
&lt;a href="https://www.youtube.com/watch?v=aircAruvnKk&amp;amp;list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi&amp;amp;index=1"&gt;Redes neurais do 3Blue1Brow&lt;/a&gt; (que são ótimos por sinal)&lt;/p&gt;
&lt;p&gt;O Keras, trabalhar em cima de modelos (models). Modelos são especificações de como sua rede neural sera construída, por exemplo quais camadas vão estar conectadas com quais, os nós, serão totalmente conexos ou não, e por ai vai. Seria como se fosse a "planta" de uma rede neural.&lt;/p&gt;
&lt;p&gt;A mais comum, é a Sequencial (Sequential), onde a informação de uma camada é passada para seguinte sequencial, ou seja a camada n para informação a camada n+1. É aquela imagem clássica quando se trata de redes neurais. Veja a imagem abaixo: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://miro.medium.com/max/1400/1*ZB6H4HuF58VcMOWbdpcRxQ.png"&gt;&lt;/p&gt;</content></entry><entry><title>Bem-vindo ao Caverna de Dados!</title><link href="https://cavernadedados.com/2019/05/bem-vindo-ao-caverna-de-dados.html" rel="alternate"></link><published>2019-05-07T00:00:00+02:00</published><updated>2019-05-07T00:00:00+02:00</updated><author><name>hugo</name></author><id>tag:cavernadedados.com,2019-05-07:/2019/05/bem-vindo-ao-caverna-de-dados.html</id><summary type="html">&lt;p&gt;Bem-vindo ao Blog Caverna de Dados! Esperamos que aqui você possa encontrar ao menos alguma coisa que agregue em seu conhecimento e que também possa se divertir lendo sobre Data Science, Machine Learning, Estatística e muitos outros temas.&lt;/p&gt;</summary><content type="html">&lt;p&gt;O blog Caverna de Dados é uma iniciativa dos mineradores Diego Zurita, graduando em Ciência da Computação na Universidade de São Paulo (USP), e Hugo Trigueiro, graduando em Economia na Universidade Federal do ABC (UFABC).&lt;/p&gt;
&lt;p&gt;Inicialmente, era um desejo de ambos ter um espaço para escrever sobre Data Science, Estatística, Economia, Programação e tudo o que está ligado ao universo da análise de dados, com fins puramente de estudo. Afinal, sabemos que quando escrevemos e tentamos explicar um assunto para alguém, também estamos estudando e melhorando o nosso aprendizado.&lt;/p&gt;
&lt;p&gt;Sabendo deste desejo e após algumas conversas, pensamos que poderíamos criar um blog e tocar esse projeto juntos, criando um espaço que unisse a nossa vontade de aprender com a possibilidade de compartilhar conteúdo com ainda mais pessoas.&lt;/p&gt;
&lt;p&gt;Assim surgiu o Caverna! Esperamos que aqui você possa encontrar ao menos alguma coisa que agregue em seu conhecimento e que também possa se divertir lendo sobre estes temas que são tão interessantes.&lt;/p&gt;
&lt;p&gt;Já sobre o nome Caverna de Dados, achamos que é um nome que representa bastante o que seria esse universo de Data Science. Um local difícil de explorar, mas que com habilidade e as ferramentas corretas, é possível se chegar até os metais preciosos (os dados) e extrair a riqueza que tanto buscamos.&lt;/p&gt;
&lt;p&gt;Aproveite o conteúdo. Abraços!&lt;/p&gt;
&lt;p&gt;Email de contato: cavernadedados@gmail.com&lt;/p&gt;</content></entry></feed>